image: docker:19.03.10

services:
  - docker:19.03.10-dind

variables:
  # AUTO_DEVOPS_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  # AUTO_DEVOPS_DOMAIN: notify-messenger-notify-server-staging.lavanote.com
  # AUTO_DEVOPS_DOMAIN: smartpass.app
  DOCKER_TLS_CERTDIR: "/certs"
  KUBERNETES_VERSION: 1.21.6
  HELM_VERSION: 3.6.2
  SENTRY_ORG: "smartpass"
  SENTRY_PROJECT: "hall-pass-web"

stages:
  - lint
  - build
  - deploy

lint:
  stage: lint
  script:
    - 'echo "http://dl-3.alpinelinux.org/alpine/v3.10/main/" >> /etc/apk/repositories'
    - 'echo "http://dl-3.alpinelinux.org/alpine/v3.10/community/" >> /etc/apk/repositories'
    - apk add --no-cache bash tree git python make g++ libstdc++ coreutils yarn
    - wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use
    - mkdir ~/.nvm/versions
    - echo "export NVM_NODEJS_ORG_MIRROR=https://unofficial-builds.nodejs.org/download/release" >> ~/.profile
    - echo "nvm_get_arch() { nvm_echo \"x64-musl\"; }" >> ~/.profile
    - source ~/.profile
    - bash
    - nvm -v
    - "mkdir ~/.nvm/.cache && mkdir ~/.nvm/.cache/bin && mkdir ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl"
    - "wget -P ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl https://unofficial-builds.nodejs.org/download/release/v$(cat .nvmrc)/node-v$(cat .nvmrc)-linux-x64-musl.tar.xz"
    - nvm install $(cat .nvmrc)
    - nvm use
    - yarn install
    - yarn lint:ci
  only:
    refs:
      - merge_requests

  tags:
    - "docker-passthrough"

testing_build:
  stage: build
  script:
    - 'echo "http://dl-3.alpinelinux.org/alpine/v3.10/main/" >> /etc/apk/repositories'
    - 'echo "http://dl-3.alpinelinux.org/alpine/v3.10/community/" >> /etc/apk/repositories'
    - apk add --no-cache bash tree git python make g++ libstdc++ coreutils yarn
    - wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use
    - mkdir ~/.nvm/versions
    - echo "export NVM_NODEJS_ORG_MIRROR=https://unofficial-builds.nodejs.org/download/release" >> ~/.profile
    - echo "nvm_get_arch() { nvm_echo \"x64-musl\"; }" >> ~/.profile
    - source ~/.profile
    - bash
    - nvm -v
    - "mkdir ~/.nvm/.cache && mkdir ~/.nvm/.cache/bin && mkdir ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl"
    - "wget -P ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl https://unofficial-builds.nodejs.org/download/release/v$(cat .nvmrc)/node-v$(cat .nvmrc)-linux-x64-musl.tar.xz"
    - nvm install $(cat .nvmrc)
    - nvm use
    - "wget 'https://github.com/getsentry/sentry-cli/releases/download/1.49.0/sentry-cli-Linux-x86_64' -O /usr/local/bin/sentry-cli"
    - chmod +x /usr/local/bin/sentry-cli
    - ls -l / ; pwd
    - "[ -d /mem_fs ] && cp -r /notify-messenger/hall-pass-web /mem_fs/hall-pass-web && cd /mem_fs/hall-pass-web || echo 'Not using mem disk!'"
    - pwd
    - source scripts/auto_devops.sh
    - scripts/build.sh
  variables:
    AUTO_DEVOPS_DOMAIN: "smartpass-testing.lavanote.com"
    IMAGE_TAG_SUFFIX: "testing"
    INCLUDE_SOURCEMAPS: "true"
  needs: [lint]
  only:
    kubernetes: active
    refs:
      - merge_requests

  tags:
    - "docker-passthrough"

testing_e2e:
  stage: build
  image: cypress/browsers:node12.19.0-chrome86-ff82
  script:
    - yarn install --immutable
    - yarn run e2e:ci
  only:
    refs:
      - merge_requests
  tags:
    - "docker-passthrough"

testing_deploy:
  stage: deploy
  script:
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/main/" >> /etc/apk/repositories'
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/community/" >> /etc/apk/repositories'
    - apk add --no-cache bash tree git python make g++ libstdc++ coreutils
    - source scripts/auto_devops.sh
    # no build command. This causes it to reuse the pre-built images because IMAGE_TAG_SUFFIX is shared.
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy
  variables:
    AUTO_DEVOPS_DOMAIN: "smartpass-testing.lavanote.com"
    IMAGE_TAG_SUFFIX: "testing"
    INCLUDE_SOURCEMAPS: "true"
  environment:
    name: testing
    url: "https://smartpass-testing.lavanote.com"
    deployment_tier: development
  when: manual
  needs: [testing_build]
  only:
    kubernetes: active
    refs:
      - merge_requests
  tags:
    - "docker-passthrough"

deploy_staging:
  stage: deploy
  script:
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/main/" >> /etc/apk/repositories'
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/community/" >> /etc/apk/repositories'
    - apk add --no-cache bash tree git python make g++ libstdc++ coreutils yarn
    - wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use
    - mkdir ~/.nvm/versions
    - echo "export NVM_NODEJS_ORG_MIRROR=https://unofficial-builds.nodejs.org/download/release" >> ~/.profile
    - echo "nvm_get_arch() { nvm_echo \"x64-musl\"; }" >> ~/.profile
    - source ~/.profile
    - bash
    - nvm -v
    - "mkdir ~/.nvm/.cache && mkdir ~/.nvm/.cache/bin && mkdir ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl"
    - "wget -P ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl https://unofficial-builds.nodejs.org/download/release/v$(cat .nvmrc)/node-v$(cat .nvmrc)-linux-x64-musl.tar.xz"
    - nvm install $(cat .nvmrc)
    - nvm use
    - "wget 'https://github.com/getsentry/sentry-cli/releases/download/1.49.0/sentry-cli-Linux-x86_64' -O /usr/local/bin/sentry-cli"
    - chmod +x /usr/local/bin/sentry-cli
    - ls -l / ; pwd
    - "[ -d /mem_fs ] && cp -r /notify-messenger/hall-pass-web /mem_fs/hall-pass-web && cd /mem_fs/hall-pass-web || echo 'Not using mem disk!'"
    - pwd
    - source scripts/auto_devops.sh
    - scripts/build.sh
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy
  variables:
    AUTO_DEVOPS_DOMAIN: "notify-messenger-notify-server-staging.lavanote.com"
    IMAGE_TAG_SUFFIX: "staging"
  environment:
      name: staging
      url: "https://notify-messenger-notify-server-staging.lavanote.com"
  needs: [lint]
  only:
    refs:
      - master
    kubernetes: active
  tags:
      - "docker-passthrough"

build_production:
  stage: build
  script:
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/main/" >> /etc/apk/repositories'
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/community/" >> /etc/apk/repositories'
    - apk add --no-cache bash tree git python make g++ libstdc++ coreutils yarn
    - wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use
    - mkdir ~/.nvm/versions
    - echo "export NVM_NODEJS_ORG_MIRROR=https://unofficial-builds.nodejs.org/download/release" >> ~/.profile
    - echo "nvm_get_arch() { nvm_echo \"x64-musl\"; }" >> ~/.profile
    - source ~/.profile
    - bash
    - nvm -v
    - "mkdir ~/.nvm/.cache && mkdir ~/.nvm/.cache/bin && mkdir ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl"
    - "wget -P ~/.nvm/.cache/bin/node-v$(cat .nvmrc)-linux-x64-musl https://unofficial-builds.nodejs.org/download/release/v$(cat .nvmrc)/node-v$(cat .nvmrc)-linux-x64-musl.tar.xz"
    - nvm install $(cat .nvmrc)
    - nvm use
    - "wget 'https://github.com/getsentry/sentry-cli/releases/download/1.49.0/sentry-cli-Linux-x86_64' -O /usr/local/bin/sentry-cli"
    - chmod +x /usr/local/bin/sentry-cli
    - ls -l / ; pwd
    - "[ -d /mem_fs ] && cp -r /notify-messenger/hall-pass-web /mem_fs/hall-pass-web && cd /mem_fs/hall-pass-web || echo 'Not using mem disk!'"
    - pwd
    - source scripts/auto_devops.sh
    - scripts/build.sh
  variables:
    AUTO_DEVOPS_DOMAIN: "smartpass.app"
    IMAGE_TAG_SUFFIX: "production"
  needs: [lint]
  only:
    refs:
    - production
    kubernetes: active
  tags:
  - "docker-passthrough"

deploy_production:
  stage: deploy
  script:
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/main/" >> /etc/apk/repositories'
    - 'echo "@old http://dl-3.alpinelinux.org/alpine/v3.10/community/" >> /etc/apk/repositories'
    - apk add --no-cache bash tree git python make g++ libstdc++ coreutils
    - source scripts/auto_devops.sh
    # build is not specified here. The IMAGE_TAG_SUFFIX will be used to match to the build with the same commit sha.
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy
  variables:
    AUTO_DEVOPS_DOMAIN: "smartpass.app"
    IMAGE_TAG_SUFFIX: "production"
  environment:
    name: production
    url: "https://smartpass.app"
  when: manual
  needs: [build_production]
  only:
    refs:
    - production
    kubernetes: active
  tags:
  - "docker-passthrough"

